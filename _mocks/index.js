const express = require('express');
 
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
const root = express.Router();
const router = express.Router();

const bodyParser = require('body-parser');

const app = express();
const has = Object.hasOwnProperty;

app.use(bodyParser.json())
    
// –ë–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç API
const TODOS_SERVER_CONTEXT = '/TODOS_SERVER_CONTEXT';
 
// –û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
const ITEMS = {
    1: {
        id: 1,
        text: '–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø',
        isDone: true,
    },
    2: {
        id: 2,
        text: '–ü—Ä–æ—á–∏—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é',
        isDone: true,
    },
    3: {
        id: 3,
        text: '–°–æ–∑–¥–∞—Ç—å –º–æ–¥—É–ª—å —Å –ø—Ä–∏–º–µ—Ä–æ–º –∫–æ–¥–∞',
        isDone: true,
    },
    4: {
        id: 4,
        text: '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å–≤–æ–π –º–æ–¥—É–ª—å',
        isDone: false,
    },
    5: {
        id: 5,
        text: '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –º–æ–¥—É–ª—å',
        isDone: false,
    },
    6: {
        id: 6,
        text: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å –∏ –ø—Ä–æ–π—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é',
        isDone: false,
    },
    7: {
        id: 7,
        text: '–î–æ–∂–¥–∞—Ç—å—Å—è —Ä–µ–ª–∏–∑–∞ –≤ –ü–†–û–ú',
        isDone: false,
    },
    8: {
        id: 8,
        text: 'üéâüéâüéâ',
        isDone: false,
    },
};
 
// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
router.get('/todos', (req, res) => {
    res.status(200).send(ITEMS);
});
 
// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
router.post('/todo', (req, res) => {
    const item = req.body;
 
    item.id = Date.now();
 
    ITEMS[item.id] = item;
 
    res.status(201).end();
});
 
// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
router.put('/todo/:id', (req, res) => {
    const itemId = req.params.id;
    const item = req.body;
 
    if (!itemId || !has.call(ITEMS, itemId)) {
        res.status(404).send(`TODO with id ${itemId} not found`);
 
        return;
    }
 
    ITEMS[itemId] = item;
 
    res.status(200).end();
});
 
// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
router.delete('/todo/:id', (req, res) => {
    const itemId = req.params.id;
 
    if (!itemId || !has.call(ITEMS, itemId)) {
        res.status(404).send(`TODO with id ${itemId} not found`);
 
        return;
    }
 
    delete ITEMS[itemId];
 
    res.status(200).end();
});
 
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–µ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É
root.use(TODOS_SERVER_CONTEXT, router);
app.use("/", router);
app.listen(8000);